#!/usr/bin/env python3

import satellites.core
import satellites.components.datasources as datasources
from gnuradio import gr, blocks

import signal
import argparse
import sys

def argument_parser():
    description = 'gr-satellites - GNU Radio decoders for Amateur satellites'
    info = 'The satellite parameter can be specified using name, NORAD ID or path to YAML file'
    p = argparse.ArgumentParser(description = description, conflict_handler = 'resolve', prog = f'gr_satellites satellite', epilog = info)

    p_input = p.add_argument_group('input')
    p_input.add_argument('--wavfile', help = 'WAV input file')
    p_input.add_argument('--samp_rate', type = float, help = 'Sample rate (Hz)')
    p_input.add_argument('--udp', action = 'store_true', help = 'Use UDP input')
    p_input.add_argument('--udp_ip', default = '::', help = 'UDP input listen IP [default=%(default)r]')
    p_input.add_argument('--udp_port', default = '7355', type = int, help = 'UDP input listen port [default=%(default)r]')
    p_input.add_argument('--kiss_in', help = 'KISS input file')
    
    p_output = p.add_argument_group('output')
    p_output.add_argument('--kiss_out', help = 'KISS output file')
    p_output.add_argument('--kiss_append', action = 'store_true', help = 'Append to KISS output file')
    return p

def check_options(options, parser):
    if sum([bool(x) for x in [options.wavfile, options.udp, options.kiss_in]]) != 1:
        print('Need to specify exactly one of the following input sources: {--wavfile, --udp, --kiss_in}', file = sys.stderr)
        parser.print_usage(file = sys.stderr)
        sys.exit(1)
    if options.kiss_in is None and options.samp_rate is None:
        print('Need to specify --samp_rate unless --kiss_in is used', file = sys.stderr)
        parser.print_usage(file = sys.stderr)
        sys.exit(1)

def parse_satellite(satellite):
    if satellite.lower().endswith('.yml'):
        return {'file' : satellite}
    elif satellite.isnumeric():
        return {'norad' : int(satellite)}
    else:
        return {'name' : satellite}
    
class gr_satellites_top_block(gr.top_block):
    def __init__(self, parser):
        gr.top_block.__init__(self, 'gr-satellites top block')
        sat = parse_satellite(sys.argv[1])
        satellites.core.gr_satellites_flowgraph.add_options(parser, **sat)
        options = parser.parse_args(sys.argv[2:])
        check_options(options, parser)
        
        self.options = options

        pdu_in = options.kiss_in is not None
        
        self.flowgraph = satellites.core.gr_satellites_flowgraph(samp_rate = options.samp_rate, pdu_in = pdu_in, options = options, **sat)
        self.setup_input()
        if pdu_in:
            self.msg_connect((self.input, 'out'), (self.flowgraph, 'in'))
        else:
            self.connect(self.input, self.flowgraph)

    def setup_input(self):
        if self.options.wavfile is not None:
            return self.setup_wavfile_input()
        elif self.options.udp is True:
            return self.setup_udp_input()
        elif self.options.kiss_in is not None:
            return self.setup_kiss_input()
        else:
            raise Exception('No input source set for flowgraph')

    def setup_wavfile_input(self):
        self.input = blocks.wavfile_source(self.options.wavfile, False)

    def setup_udp_input(self):
        self.udp = blocks.udp_source(gr.sizeof_short, self.options.udp_ip, self.options.udp_port, 1472, False)
        self.input = blocks.short_to_float(1, 32767)
        self.connect(self.udp, self.input)

    def setup_kiss_input(self):
        self.input = datasources.kiss_file_source(self.options.kiss_in)

def main():
    parser = argument_parser()
    if len(sys.argv) <= 1 or sys.argv[1][0] == '-':
        parser.print_usage(file = sys.stderr)
        sys.exit(1)
    
    tb = gr_satellites_top_block(parser)

    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()
        sys.exit(0)

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    tb.start()
    tb.wait()
        
if __name__ == '__main__':
    main()
